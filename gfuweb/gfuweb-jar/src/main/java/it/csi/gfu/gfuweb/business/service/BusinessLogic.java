/*******************************************************************************
* Copyright CSI-Piemonte -2021
* SPDX-License-Identifier: EUPL-1.2-or-later.
******************************************************************************/
package it.csi.gfu.gfuweb.business.service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import it.csi.gfu.gfuweb.dto.comune.Comune;
import it.csi.gfu.gfuweb.dto.Profilo;
import it.csi.gfu.gfuweb.dto.associazione.Associazione;
import it.csi.gfu.gfuweb.dto.dr.Dr;
import it.csi.gfu.gfuweb.dto.dr.TipoDr;
import it.csi.gfu.gfuweb.dto.erogazione.DeterminaToErogazioni;
import it.csi.gfu.gfuweb.dto.erogazione.Erogazione;
import it.csi.gfu.gfuweb.dto.finanziamento.Finanziamento;
import it.csi.gfu.gfuweb.dto.filter.RichiestaFilter;
import it.csi.gfu.gfuweb.dto.legge.Legge;
import it.csi.gfu.gfuweb.dto.legge.LeggeProvvDr;
import it.csi.gfu.gfuweb.dto.parere.Parere;
import it.csi.gfu.gfuweb.dto.percentuale.Percentuale;
import it.csi.gfu.gfuweb.dto.popolazione.VincoloPopolazione;
import it.csi.gfu.gfuweb.dto.praticaurb.PraticaUrbGfu;
import it.csi.gfu.gfuweb.dto.provvedimento.Provvedimento;
import it.csi.gfu.gfuweb.dto.rendiconto.Rendiconto;
import it.csi.gfu.gfuweb.dto.richiedente.Richiedente;
import it.csi.gfu.gfuweb.dto.richiedente.RichiedenteProvv;
import it.csi.gfu.gfuweb.dto.richiesta.Richiesta;
import it.csi.gfu.gfuweb.dto.statofinanziamento.StatoFinanziamento;
import it.csi.gfu.gfuweb.dto.tetto.TettoMax;
import it.csi.gfu.gfuweb.dto.tetto.TettoMaxTotRichiedenti;
import it.csi.gfu.gfuweb.dto.richiesta.RichiestaToRicercaAvanzata;
import it.csi.gfu.gfuweb.dto.richiestaprovv.RichiestaProvv;
import it.csi.gfu.gfuweb.dto.user.utente.Utente;
import it.csi.gfu.gfuweb.dto.user.utente.UtenteFilter;
import it.csi.gfu.gfuweb.exception.DaoException;
import it.csi.gfu.gfuweb.exception.DatiInputErratiException;
import it.csi.gfu.gfuweb.exception.SystemException;

public interface BusinessLogic extends BusinessLogicExtService
{
	public List<Utente> getUtenteByFilter(UtenteFilter utenteFilter) throws DaoException, SystemException;
	public List<Profilo> getProfilo() throws DaoException, SystemException;
	public Profilo getProfiloById(BigDecimal idProfilo) throws DaoException, SystemException;
	public List<Associazione> readAllAssociazioni(String descAssociazione, String tipoFormaAss, Boolean isValid)throws DaoException, SystemException;
	public Associazione readAssociazioneByPk(Long idAssociazione)throws DaoException, SystemException;
	public Associazione createAssociazione(Associazione associazione)throws DaoException, SystemException;
	public List<Comune> readAllComuni(String descComune, Boolean isValid)throws DaoException, SystemException;
	public Comune readComuneByPk(String codIstat)throws DaoException, SystemException;
	public List<Dr> readAllDr(Boolean isValid)throws DaoException, SystemException;
	public Dr readDrByPk(Long id)throws DaoException, SystemException;
	public Dr createDr(Dr dr)throws DaoException, SystemException;
	public Dr updateDr(Dr dr)throws DaoException, SystemException;
	public List<Provvedimento> readAllProvvedimenti(Boolean isValid)throws DaoException, SystemException;
	public Provvedimento readProvvedimentoByPk(Long id)throws DaoException, SystemException;
	public Provvedimento createProvvedimento(Provvedimento provvedimento)throws DaoException, SystemException;
	public Provvedimento updateProvvedimento(Provvedimento provvedimento)throws DaoException, SystemException;
	public List<LeggeProvvDr> readAllLeggeProvvDr(String descLeggiProvvDr, Boolean isValid)throws DaoException, SystemException;
	public LeggeProvvDr readLeggeProvvDrByPk(Long id)throws DaoException, SystemException;
	public LeggeProvvDr createLeggeProvvDr(LeggeProvvDr leggeProvvDr)throws DaoException, SystemException,DatiInputErratiException;
	public LeggeProvvDr updateLeggeProvvDr(LeggeProvvDr leggeProvvDr)throws DaoException, SystemException,DatiInputErratiException;
	public List<Legge> readAllLeggi(Boolean isValid)throws DaoException, SystemException;
	public Legge readLeggeByPk(Long id)throws DaoException, SystemException;
	public Legge createLegge(Legge legge)throws DaoException, SystemException;
	public Legge updateLegge(Legge legge)throws DaoException, SystemException;
	public List<Percentuale> readAllPercentuali(Boolean isValid)throws DaoException, SystemException;
	public Percentuale readPercentualeByPk(Long id)throws DaoException, SystemException;
	public Percentuale createPercentuale(Percentuale percentuale)throws DaoException, SystemException;
	public Percentuale updatePercentuale(Percentuale percentuale)throws DaoException, SystemException;
	public List<Parere> readAllPareri(Boolean isValid)throws DaoException, SystemException;
	public Parere readParereByPk(Long id)throws DaoException, SystemException;
	public Parere createParere(Parere parere)throws DaoException, SystemException;
	public Parere updateParere(Parere parere)throws DaoException, SystemException;
	public List<Rendiconto> readAllRendiconti(Boolean isValid)throws DaoException, SystemException;
	public Rendiconto readRendicontoByPk(Long id)throws DaoException, SystemException;
	public Rendiconto createRendiconto(Rendiconto rendiconto)throws DaoException, SystemException;
	public Rendiconto updateRendiconto(Rendiconto rendiconto)throws DaoException, SystemException;
	public List<TipoDr> readAllTipiDr()throws DaoException, SystemException;
	public List<Richiesta> readAllRichieste(Boolean isValid)throws DaoException, SystemException;
	public Richiesta readRichiestaByPk(Long idRichiesta)throws DaoException, SystemException;
	public Richiesta createRichiesta(Richiesta richiesta)throws DaoException, SystemException, DatiInputErratiException;
	public Richiesta updateRichiesta(Long idRichiesta, Richiesta richiesta)throws DaoException, SystemException, DatiInputErratiException;
	public void updateRichiestaToFormaAssociativa(Long idRichiesta, Long idAssociazione)throws DaoException, SystemException,DatiInputErratiException;
	public List<VincoloPopolazione> readAllVincoloPopolazione(Boolean isValid)throws DaoException, SystemException;
	public VincoloPopolazione readVincoloPopolazioneByPk(Long idVincoloPopolazione)throws DaoException, SystemException;
	public VincoloPopolazione createVincoloPopolazione(VincoloPopolazione vincoloPopolazione)throws DaoException, SystemException;
	public VincoloPopolazione updateVincoloPopolazione(VincoloPopolazione vincoloPopolazione)throws DaoException, SystemException;
	public List<Richiedente> readAllRichiedenti(Long idRichiesta)throws DaoException, SystemException;
	public List<Richiedente> createRichiedente(Long idRichiesta, List<Richiedente> listRichiedente)throws DaoException, SystemException,DatiInputErratiException;
	public Richiedente readRichiedenteByPk(Long idRichiedente)throws DaoException, SystemException;
	public void deleteRichiedente(Long idRichiesta, Long idRichiedente)throws DaoException, SystemException,DatiInputErratiException;
	public List<LeggeProvvDr> readAllProvvedimentiToRichiesta(Long idRichiesta)throws DaoException, SystemException;
	public void deleteProvvToRichiedentiToRichiesta(Long idRichiesta, Long idLeggeProvvDr)throws DaoException, SystemException, DatiInputErratiException;
	public List<RichiedenteProvv> createLeggeProvvDrToRichiesta(Long idRichiesta, Long idLeggeProvvDr)throws DaoException, SystemException, DatiInputErratiException;
	public List<RichiedenteProvv> readAllRichiedenteProvv(Long idRichiesta)throws DaoException, SystemException;
	public void updateRichiedenteProvv(Long idRichiesta, RichiedenteProvv richiedenteProvv)throws DaoException, SystemException,DatiInputErratiException;
	public Finanziamento readFinanziamentoToProvRich(Long idRichiesta, Long idLeggeProvvDr)throws DaoException, SystemException;
	public Finanziamento createFinanziamento(Long idRichiesta, Long idLeggeProvvDr, Finanziamento finanziamento)throws DaoException, SystemException,DatiInputErratiException;
	public Finanziamento readFinanziamentoByPk(Long idFinanziamento)throws DaoException, SystemException;
	public Finanziamento updateFinanziamento(Long idRichiesta, Long idFinanziamento, Finanziamento finanziamento)throws DaoException, SystemException,DatiInputErratiException;
	public List<Erogazione> readAllErogazioniToFinanziamento(Long idFinanziamento)throws DaoException, SystemException,DatiInputErratiException;
	public Finanziamento createErogazione(Long idFinanziamento, Erogazione erogazione)throws DaoException, SystemException,DatiInputErratiException;
	public void updateAllErogazioniToDetermina(DeterminaToErogazioni determinaToErogazioni)throws DaoException, SystemException,DatiInputErratiException;
	public StatoFinanziamento readStatoFinanziamento(Long idFinanziamento)throws DaoException, SystemException,DatiInputErratiException;
	public Finanziamento updateStatoFinToFinanziamento(Long idFinanziamento, Long idStatoFinanziamento)throws DaoException, SystemException,DatiInputErratiException;
	public void deleteRichiesta(Long idRichiesta)throws DaoException, SystemException;
	public List<RichiestaToRicercaAvanzata> readRichiesteByFilter(RichiestaFilter richiestaFilter)throws DaoException, SystemException;
	public List<RichiestaProvv> readAllProvvFinToRichiesta(Long idStatoFinanziamento, Long idLeggeProvvDr,
			String dataProtRichiestaDa, String dataProtRichiestaA)throws DaoException, SystemException;
	public void createExcel(RichiestaFilter filtro, ByteArrayOutputStream baos)	throws DaoException, SystemException, IOException;
	public List<TettoMax> readAllTettoMax(Boolean isValid)throws DaoException, SystemException;
	public TettoMax readTettoMaxByPk(Long idTettoMax)throws DaoException, SystemException;
	public TettoMax createTettoMax(TettoMax tettoMax)throws DaoException, SystemException,DatiInputErratiException;
	public TettoMax updateTettoMax(TettoMax tettoMax)throws DaoException, SystemException;
	public TettoMax deleteTettoMaxByPk(Long idTettoMax)throws DaoException, SystemException;
	public TettoMaxTotRichiedenti readTettoMaxToRichiedenti(Long idRichiesta, Long idLeggeProvDr)throws DaoException, SystemException;
	public Finanziamento updateErogazione(Long idFinanziamento, Long idErogazione, Erogazione erogazione)throws DaoException, SystemException,DatiInputErratiException;
	public List<Utente> readAllUtenti()throws DaoException, SystemException;
	public Utente readUtentiByPk(Long idUtente)throws DaoException, SystemException;
	public Utente createUtente(Utente utente)throws DaoException, SystemException;
	public Utente updateUtente(Utente utente)throws DaoException, SystemException;
	public Utente deleteUtenteByPk(Long idUtente)throws DaoException, SystemException;
	public Finanziamento readPraticaUrbGfuToFinanziamento(Long idFinanziamento)throws DaoException, SystemException, DatiInputErratiException;
	public Finanziamento createPraticaUrbGfu(Long idFinanziamento, PraticaUrbGfu praticaUrbGfu)throws DaoException, SystemException, DatiInputErratiException;
	public Finanziamento deletePraticaUrbGfu(Long idFinanziamento)throws DaoException, SystemException, DatiInputErratiException;
	public Utente getUtenteCollegato(UtenteFilter utenteFilter) throws DaoException, SystemException;
	
}
